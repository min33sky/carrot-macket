// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// 사용자
model User {
  id              Int         @id @default(autoincrement())
  phone           BigInt?     @unique
  email           String?     @unique
  name            String
  username        String
  avatar          String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tokens          Token[] // 로그인에 필요한 토큰
  products        Product[] // 본인이 장터에 등록한 상품들
  favorites       Favorite[] // 좋아요 누른 상품들
  posts           Post[] // 질문 게시물들
  answers         Answer[] // 답변 게시물들
  curiosities     Curiosity[] // 궁금해요 누른 질문들
  writtenReviews  Review[]    @relation(name: "writtenReviews") // 리뷰 작성 목록
  receivedReviews Review[]    @relation(name: "receivedReviews") // 리뷰 받은 목록
  sales           Sale[]
  purchases       Purchase[]
}

// 인증 토큰
model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

// 상품
model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String     @db.MediumText
  price       Int
  image       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  favorites   Favorite[]
  sales       Sale[]
  purchases   Purchase[]
}

// 질문 게시물
model Post {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  question    String      @db.MediumText
  latitude    Float?
  longitude   Float?
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  answers     Answer[]
  curiosities Curiosity[]
}

// 답변 게시물
model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answer    String   @db.MediumText
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}

// 질문 게시물의 궁금해요
model Curiosity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}

// 리뷰
model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   @db.MediumText
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade) // 리뷰 작성자
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade) // 리뷰 대상
  createdForId Int
}

// 관심 상품
model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Sale {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Purchase {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}
